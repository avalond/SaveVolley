/*
 * Copyright (C) 2016 CaMnter yuanyu.camnter@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

include ':extensions:agera-fastjson:savevolley-hurl-agera-fastjson',
        ':extensions:agera-fastjson:savevolley-okhttp3-agera-fastjson',

        ':extensions:agera-gson:savevolley-hurl-agera-gson',
        ':extensions:agera-gson:savevolley-okhttp3-agera-gson',

        ':extensions:fastjson:savevolley-hurl-fastjson',
        ':extensions:fastjson:savevolley-okhttp3-fastjson',

        ':extensions:gson:savevolley-hurl-gson',
        ':extensions:gson:savevolley-okhttp3-gson',

        ':extensions:savevolley-hurl-agera-core',
        ':extensions:savevolley-okhttp3-agera-core',

        ':samples',

        ':savevolley-hurl',
        ':savevolley-network-adapter',
        ':savevolley-network-core',
        ':savevolley-network-hurl-adapter',
        ':savevolley-network-okhttp3-adapter',
        ':savevolley-okhttp3'

gradle.ext.ageraVersion = '1.1.0'
gradle.ext.okhttp3Version = '3.3.1'
gradle.ext.gsonVersion = '2.7'
gradle.ext.fastjsonVersion = '1.1.52.android'

gradle.ext.versionCode = 166
gradle.ext.versionName = '1.6.6'

gradle.ext.bintrayRepo = 'maven'
gradle.ext.bintrayName = 'SaveVolley'
gradle.ext.bintrayUser = 'camnter'

gradle.ext.description = 'Save volley from anything'
gradle.ext.group = 'com.camnter.savevolley'
gradle.ext.url = 'https://github.com/CaMnter/SaveVolley'
gradle.ext.gitUrl = 'https://github.com/CaMnter/SaveVolley.git'
gradle.ext.licenseName = 'The Apache Software License, Version 2.0'
gradle.ext.licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'

gradle.ext.minSdkVersion = 9
gradle.ext.compileSdkVersion = 23
gradle.ext.buildToolsVersion = '24.0.0'
gradle.ext.supportLibraryVersion = '24.0.0'
gradle.ext.javaVersion = JavaVersion.VERSION_1_7

gradle.allprojects {
    buildscript {
        repositories {
            jcenter()
        }
        dependencies {
            classpath 'com.android.tools.build:gradle:2.1.0'
            classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
            classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.3.1'
            classpath 'com.novoda:bintray-release:0.3.4'
        }
    }
    repositories {
        jcenter()
    }
    tasks.withType(JavaForkOptions) {
        jvmArgs '-Djava.awt.headless=true'
    }
    tasks.withType(Test) {
        testLogging {
            exceptionFormat "full"
            events "passed", "failed", "skipped"
            showCauses true
            showExceptions true
            showStackTraces true
            showStandardStreams true
        }
    }
    afterEvaluate { project ->
        if (project.hasProperty("android")) {
            android {
                defaultConfig {
                    versionCode gradle.versionCode
                    versionName gradle.versionName
                }
            }
            if (android.hasProperty('libraryVariants')) {
                version = gradle.versionName
                group = gradle.group
                android {
                    lintOptions {
                        textReport true
                        textOutput 'stdout'
                        checkAllWarnings true
                    }
                    buildTypes {
                        debug {
                            testCoverageEnabled true
                        }
                    }
                }
                dependencies {
                    compile 'com.android.support:support-annotations:' + gradle.supportLibraryVersion
                    testCompile 'org.hamcrest:hamcrest-library:1.3'
                    testCompile 'junit:junit:4.12'
                    testCompile 'org.robolectric:robolectric:3.1-rc1'
                    testCompile 'org.mockito:mockito-core:1.10.19'
                    testCompile 'nl.jqno.equalsverifier:equalsverifier:2.0.2'
                }
                task sourcesJar(type: Jar) {
                    from android.sourceSets.main.java.srcDirs
                    classifier = 'sources'
                }
                task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
                    group = "Reporting"
                    description = "Generate Jacoco coverage reports"
                    def fileFilter = ['**/R.class', '**/R$*.class', '**/BR.class',
                                      '**/BuildConfig.*', '**/Manifest*.*', 'android/**/*.*']
                    def debugTree = fileTree(dir: "${project.buildDir}/intermediates/classes/debug",
                            excludes: fileFilter)
                    def mainSrc = "${project.projectDir}/src/main/java"

                    sourceDirectories = files([mainSrc])
                    classDirectories = files([debugTree])
                    additionalSourceDirs = files(["${buildDir}/generated/source/buildConfig/debug",
                                                  "${buildDir}/generated/source/r/debug"])
                    executionData =
                            fileTree(dir: project.projectDir, includes: ['**/*.exec', '**/*.ec'])

                    reports {
                        xml.enabled = true
                        xml.destination = "${buildDir}/jacocoTestReport.xml"
                        csv.enabled = false
                        html.enabled = true
                        html.destination = "${buildDir}/reports/jacoco"
                    }
                }
                android.libraryVariants.all { variant ->
                    task("${variant.name}Javadoc", type: Javadoc) {
                        description "Generates Javadoc for $variant.name."
                        source = variant.javaCompile.source
                        classpath = files(variant.javaCompile.classpath.files,
                                project.android.getBootClasspath())
                        exclude '**/BuildConfig.java'
                        exclude '**/R.java'
                    }
                }
                task javadocJar(type: Jar, dependsOn: 'releaseJavadoc') {
                    classifier = 'javadoc'
                    from {
                        releaseJavadoc.destinationDir
                    }
                }
                artifacts {
                    archives javadocJar
                    archives sourcesJar
                }
                android {
                    compileSdkVersion gradle.compileSdkVersion
                    buildToolsVersion gradle.buildToolsVersion
                }
            }
        }
    }
}